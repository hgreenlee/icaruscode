#include "services_icarus_simulation.fcl"
#include "multipartvertex_icarus.fcl"

process_name: MultiVertexGen

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "multivertex_hist_uboone.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::icarus_gen_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::MultiPartVertex
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

physics.producers.generator.DebugMode    : 1
physics.producers.generator.G4Time       : 0
physics.producers.generator.G4TimeJitter : 0
physics.producers.generator.XRange       : [-280,-270]
physics.producers.generator.YRange       : [-5,5]
physics.producers.generator.ZRange       : [-5,5]
physics.producers.generator.MultiMax     : 3
physics.producers.generator.MultiMin     : 1
#physics.producers.generator.ParticleParameter.PDGCode      : [       [11],        [22],       [13],      [2212]]
#physics.producers.generator.ParticleParameter.MinMulti     : [          0,           0,          0,           0]
#physics.producers.generator.ParticleParameter.MaxMulti     : [          1,           1,          1,           1]
#physics.producers.generator.ParticleParameter.ProbWeight   : [          1,           1,          1,           1]
#physics.producers.generator.ParticleParameter.KERange      : [ [0.05,0.5],  [0.05,0.5], [0.05,1.0],  [0.05,0.4]]
physics.producers.generator.ParticleParameter.PDGCode      : [       [13],      [2212]]
physics.producers.generator.ParticleParameter.MinMulti     : [          0,           0]
physics.producers.generator.ParticleParameter.MaxMulti     : [          1,           1]
physics.producers.generator.ParticleParameter.ProbWeight   : [          1,           1]
physics.producers.generator.ParticleParameter.KERange      : [ [0.05,1.0],  [0.05,0.4]]
physics.producers.generator.ParticleParameter.MomRange     : []

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "prod_multivertex_icarus_%tc_gen.root"
   dataTier:    "generated"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

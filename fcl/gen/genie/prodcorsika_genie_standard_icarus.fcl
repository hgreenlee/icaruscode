#include "seedservice.fcl"
#include "singles.fcl"
#include "larproperties.fcl"
#include "magfield_larsoft.fcl"

#include "largeantmodules.fcl"
#include "corsika_icarus.fcl"
#include "mcreco.fcl"
#include "services_common_icarus.fcl"
#include "genie_icarus_bnb.fcl"
#include "services_icarus_simulation.fcl"

process_name: GenGenieCorsika

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_uboone.root" }
  TimeTracker:  {}
  MemoryTracker:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  #FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::icarus_gen_services
  IFDH:         {}
}

#Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:       10          # Number of events to create
  firstRun:        1           # Run number to use for this file
  firstEvent:      1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::icarus_genie_BNB # from `genie_icarus_bnb.fcl`
   cosmgen:   @local::icarus_corsika_cmc  
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, cosmgen ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "prodcorsika_genie_standard_icarus_%tc-%p.root"
   dataTier:    "simulated"
   compressionLevel: 1
   fastCloning: false
   saveMemoryObjectThreshold: 0
 }
}

#physics.producers.cosmgen.EnergyThreshold: 2e-1
#physics.producers.cosmgen.SubBoxLength: "subboxLength 60 "

services.TFileService.fileName: "Supplemental-prodcorsika_genie_standard_icarus_%tc-%p.root"

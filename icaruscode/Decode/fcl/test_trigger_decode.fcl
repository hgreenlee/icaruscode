#include "services_common_icarus.fcl"
#include "channelmapping_icarus.fcl"
#include "decoderdefs_icarus.fcl"
#include "recowire_icarus.fcl"
#include "hitfindermodules_icarus.fcl"
#include "icarus_ophitfinder.fcl"

process_name: decode

services:
{
   TFileService:            { }
   IICARUSChannelMap:        @local::icarus_channelmappinggservice
                             @table::icarus_calibration_services
                             @table::icarus_wirecalibration_services
}

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
}

# Make sure to get rid of NuRandomSvc (not thread save)
services.NuRandomService: @erase

physics:
{
    // now also have something produce the digits and headers
    producers:
    {
        #daqPMT:      @local::decodePMT
	daqTrigger:  @local::decodeTrigger
	
    }

    analyzers: {}
    #my_producer_modules: [daqTPC, daqPMT, daqTrigger]
    my_producer_modules: [ daqTrigger ]
    a: [rootout]
    end_paths: [a]
}

# turn off the sam metadata for testing
services.FileCatalogMetadata: {}

# Use this to setup the decoder module

physics.producers.ophit.InputModule: "daqPMT"
physics.producers.ophit.InputLabels: []


outputs: {
  rootout: {
    module_type: "RootOutput"
    dataTier: "decoded"
    fileName: "%ifb_%tc-%p.root"
    saveMemoryObjectThreshold: 0
  }
}

# Drop the artdaq format files on output
outputs.rootout.outputCommands: ["keep *_*_*_*", "drop *_*_*_DAQ*" ]

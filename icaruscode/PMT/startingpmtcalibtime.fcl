#include "services_common_icarus.fcl"
#include "services_icarus_simulation.fcl"
#include "singles_icarus.fcl"
#include "largeantmodules_icarus.fcl"
#include "detsimmodules_ICARUS.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"

## You will write whatever name you want this process to be called 
## It is important to note that the same process name cannot be called
## twice on a ROOT file, so you may have to change this 

process_name: Coor


services:
{
  # Load the service that manages root files for histograms.
  # TFileService: { fileName: "anaTree.root" }
  # RandomNumberGenerator: {} #ART native random number generator
  @table::icarus_simulation_services
}


#This defines the input to your fcl file
#You can start by reading in a ROOT file
#Setting maxEvents = -1 will loop over all events in the file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 
 ### Here you will define any producer modules you want to run ###
 producers:
 {
  
 }
 
 ### Here you will define any analyzer modules you want to run ###
 analyzers:
 {
   coor: { module_type: "PMTStartCalibTime" }
 }
 
 ### Here you will define any filter modules you want to run ###
 filters:
 {
 
 
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 
 reco: [  ]
 
 ana:[coor]
 
 filt:[  ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ ana ]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   #SelectEvents: {SelectEvents:[reco]}
   fileName:    "prova_light.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

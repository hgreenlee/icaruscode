#include "services_common_icarus.fcl"
#include "services_icarus_simulation.fcl"
#include "backtracker.fcl"
#include "singles_icarus.fcl"
#include "largeantmodules_icarus.fcl"
#include "detsimmodules_ICARUS.fcl"
#include "mccheatermodules.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules.fcl"
#include "opticaldetectorservices.fcl"
#include "trackfinderalgorithms.fcl"
#include "mcreco.fcl"



process_name: OpticalGen

services:
{
  # Load the service that manages root files for histograms.
  # TFileService: { fileName: "single_hist_uboone.root" }
  RandomNumberGenerator: {} #ART native random number generator
                           @table::icarus_simulation_services

  OpDetResponseInterface:  @local::standard_opdetresponse
}

services.PhotonVisibilityService: @local::sbnd_timeparametrization_photonvisibilityservice

services.OpDigiProperties:        @local::standard_opdigiproperties

services.PhotonVisibilityService.LibraryFile: "19dic_library.root"

//version51_near e senza crt e arcathode
//services.PhotonVisibilityService.XMin: 320	#-300
//services.PhotonVisibilityService.XMax: 340	#-150
//services.PhotonVisibilityService.YMin: -35 	#-150 
//services.PhotonVisibilityService.YMax: -15	#150
//services.PhotonVisibilityService.ZMin: -10	#-1000
//services.PhotonVisibilityService.ZMax: 10	#1000

//version test_final
services.PhotonVisibilityService.XMin: -366	
services.PhotonVisibilityService.XMax: -66	
services.PhotonVisibilityService.YMin: -210 	 
services.PhotonVisibilityService.YMax: 180	
services.PhotonVisibilityService.ZMin: -995	
services.PhotonVisibilityService.ZMax: 965	

//services.PhotonVisibilityService.NX: 4	 
//services.PhotonVisibilityService.NY: 4	
//services.PhotonVisibilityService.NZ: 4	

//services.PhotonVisibilityService.NX: 60	 
//services.PhotonVisibilityService.NY: 78	
//services.PhotonVisibilityService.NZ: 392

# services.DetectorClocksService.ClockSpeedOptical: 1000

#This defines the input to your fcl file
#You can start by reading in a ROOT file
#Setting maxEvents = -1 will loop over all events in the file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   opdigi:    @local::standard_opdigi
   ophit:     @local::standard_ophit
   rns:       {module_type: "RandomNumberSaver"}
 }

 analyzers:
 {
   pmtresponse: @local::standard_simphotoncounter
   opdigiana: @local::standard_opdigiana
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ opdigi, ophit, rns] 
 analyzeIt:  [ pmtresponse, opdigiana]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "optical_icarus.root" #default file name, can override from command line with -o or --output
   saveMemoryObjectThreshold: 0
 }
}

# set quantum efficiency supressed scint yield to 0.03 * 24000
# services.LArPropertiesService.ScintYield: 24000
services.LArPropertiesService.ScintPreScale: 1

# disable cerenkov light
#services.DetectorPropertiesService.EnableCerenkovLight: false

physics.producers.opdigi.QE: [1]
physics.producers.opdigi.DarkRate: 0
physics.producers.opdigi.SaturationScale: 2e7

services.OpDigiProperties.QE: 1
services.OpDigiProperties.SampleFreq: 250

#physics.producers.generator.FillTree: true

services.PhotonVisibilityService.IncludePropTime: true

physics.analyzers.pmtresponse.MakeAllPhotonsTree: true
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: true
physics.analyzers.pmtresponse.MakeSimPhotonssTree: true
physics.analyzers.pmtresponse.MakeEventsTree: true
# physics.analyzers.pmtresponse.MakeLightAnalysisTree: true

